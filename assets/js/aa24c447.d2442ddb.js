"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9857],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),d=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},s="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),s=d(r),m=a,f=s["".concat(l,".").concat(m)]||s[m]||p[m]||o;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u[s]="string"==typeof e?e:a,i[1]=u;for(var d=2;d<o;d++)i[d]=r[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2879:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>u,toc:()=>d});var n=r(7462),a=(r(7294),r(3905));const o={description:"Key auth middleware"},i="Key Auth",u={unversionedId:"middleware/key-auth",id:"middleware/key-auth",title:"Key Auth",description:"Key auth middleware",source:"@site/docs/middleware/key-auth.md",sourceDirName:"middleware",slug:"/middleware/key-auth",permalink:"/docs/middleware/key-auth",draft:!1,editUrl:"https://github.com/labstack/echox/blob/master/website/docs/middleware/key-auth.md",tags:[],version:"current",frontMatter:{description:"Key auth middleware"},sidebar:"docsSidebar",previous:{title:"JWT",permalink:"/docs/middleware/jwt"},next:{title:"Logger",permalink:"/docs/middleware/logger"}},l={},d=[{value:"Usage",id:"usage",level:2},{value:"Custom Configuration",id:"custom-configuration",level:2},{value:"Usage",id:"usage-1",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Default Configuration",id:"default-configuration",level:3}],c={toc:d},s="wrapper";function p(e){let{components:t,...r}=e;return(0,a.kt)(s,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"key-auth"},"Key Auth"),(0,a.kt)("p",null,"Key auth middleware provides a key based authentication."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"For valid key it calls the next handler."),(0,a.kt)("li",{parentName:"ul"},'For invalid key, it sends "401 - Unauthorized" response.'),(0,a.kt)("li",{parentName:"ul"},'For missing key, it sends "400 - Bad Request" response.')),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'e.Use(middleware.KeyAuth(func(key string, c echo.Context) (bool, error) {\n  return key == "valid-key", nil\n}))\n')),(0,a.kt)("h2",{id:"custom-configuration"},"Custom Configuration"),(0,a.kt)("h3",{id:"usage-1"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'e := echo.New()\ne.Use(middleware.KeyAuthWithConfig(middleware.KeyAuthConfig{\n  KeyLookup: "query:api-key",\n  Validator: func(key string, c echo.Context) (bool, error) {\n            return key == "valid-key", nil\n        },\n}))\n')),(0,a.kt)("h2",{id:"configuration"},"Configuration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'KeyAuthConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // KeyLookup is a string in the form of "<source>:<name>" that is used\n  // to extract key from the request.\n  // Optional. Default value "header:Authorization".\n  // Possible values:\n  // - "header:<name>"\n  // - "query:<name>"\n  // - "cookie:<name>"\n  // - "form:<name>"\n  KeyLookup string `yaml:"key_lookup"`\n\n  // AuthScheme to be used in the Authorization header.\n  // Optional. Default value "Bearer".\n  AuthScheme string\n\n  // Validator is a function to validate key.\n  // Required.\n  Validator KeyAuthValidator\n\n  // ErrorHandler defines a function which is executed for an invalid key.\n  // It may be used to define a custom error.\n  ErrorHandler KeyAuthErrorHandler\n}\n')),(0,a.kt)("h3",{id:"default-configuration"},"Default Configuration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'DefaultKeyAuthConfig = KeyAuthConfig{\n  Skipper:    DefaultSkipper,\n  KeyLookup:  "header:" + echo.HeaderAuthorization,\n  AuthScheme: "Bearer",\n}\n')))}p.isMDXComponent=!0}}]);