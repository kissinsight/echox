"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[291],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,g=p["".concat(l,".").concat(m)]||p[m]||d[m]||s;return n?r.createElement(g,i(i({ref:t},u),{},{components:n})):r.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:a,i[1]=o;for(var c=2;c<s;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7995:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const s={description:"Testing handler and middleware",slug:"/testing",sidebar_position:13},i="Testing",o={unversionedId:"guide/testing",id:"guide/testing",title:"Testing",description:"Testing handler and middleware",source:"@site/docs/guide/testing.md",sourceDirName:"guide",slug:"/testing",permalink:"/docs/testing",draft:!1,editUrl:"https://github.com/labstack/echox/blob/master/website/docs/guide/testing.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{description:"Testing handler and middleware",slug:"/testing",sidebar_position:13},sidebar:"docsSidebar",previous:{title:"Templates",permalink:"/docs/templates"},next:{title:"Middleware",permalink:"/docs/category/middleware"}},l={},c=[{value:"Testing Handler",id:"testing-handler",level:2},{value:"CreateUser",id:"createuser",level:3},{value:"GetUser",id:"getuser",level:3},{value:"Using Form Payload",id:"using-form-payload",level:3},{value:"Setting Path Params",id:"setting-path-params",level:3},{value:"Setting Query Params",id:"setting-query-params",level:3},{value:"Testing Middleware",id:"testing-middleware",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"testing"},"Testing"),(0,a.kt)("h2",{id:"testing-handler"},"Testing Handler"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"GET")," ",(0,a.kt)("inlineCode",{parentName:"p"},"/users/:id")),(0,a.kt)("p",null,"Handler below retrieves user by id from the database. If user is not found it returns\n",(0,a.kt)("inlineCode",{parentName:"p"},"404")," error with a message."),(0,a.kt)("h3",{id:"createuser"},"CreateUser"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"POST")," ",(0,a.kt)("inlineCode",{parentName:"p"},"/users")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Accepts JSON payload"),(0,a.kt)("li",{parentName:"ul"},"On success ",(0,a.kt)("inlineCode",{parentName:"li"},"201 - Created")),(0,a.kt)("li",{parentName:"ul"},"On error ",(0,a.kt)("inlineCode",{parentName:"li"},"500 - Internal Server Error"))),(0,a.kt)("h3",{id:"getuser"},"GetUser"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"GET")," ",(0,a.kt)("inlineCode",{parentName:"p"},"/users/:email")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"On success ",(0,a.kt)("inlineCode",{parentName:"li"},"200 - OK")),(0,a.kt)("li",{parentName:"ul"},"On error ",(0,a.kt)("inlineCode",{parentName:"li"},"404 - Not Found")," if user is not found otherwise ",(0,a.kt)("inlineCode",{parentName:"li"},"500 - Internal Server Error"))),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"handler.go")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package handler\n\nimport (\n    "net/http"\n\n    "github.com/labstack/echo/v4"\n)\n\ntype (\n    User struct {\n        Name  string `json:"name" form:"name"`\n        Email string `json:"email" form:"email"`\n    }\n    handler struct {\n        db map[string]*User\n    }\n)\n\nfunc (h *handler) createUser(c echo.Context) error {\n    u := new(User)\n    if err := c.Bind(u); err != nil {\n        return err\n    }\n    return c.JSON(http.StatusCreated, u)\n}\n\nfunc (h *handler) getUser(c echo.Context) error {\n    email := c.Param("email")\n    user := h.db[email]\n    if user == nil {\n        return echo.NewHTTPError(http.StatusNotFound, "user not found")\n    }\n    return c.JSON(http.StatusOK, user)\n}\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"handler_test.go")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package handler\n\nimport (\n    "net/http"\n    "net/http/httptest"\n    "strings"\n    "testing"\n\n    "github.com/labstack/echo/v4"\n    "github.com/stretchr/testify/assert"\n)\n\nvar (\n    mockDB = map[string]*User{\n        "jon@labstack.com": &User{"Jon Snow", "jon@labstack.com"},\n    }\n    userJSON = `{"name":"Jon Snow","email":"jon@labstack.com"}`\n)\n\nfunc TestCreateUser(t *testing.T) {\n    // Setup\n    e := echo.New()\n    req := httptest.NewRequest(http.MethodPost, "/", strings.NewReader(userJSON))\n    req.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)\n    rec := httptest.NewRecorder()\n    c := e.NewContext(req, rec)\n    h := &handler{mockDB}\n\n    // Assertions\n    if assert.NoError(t, h.createUser(c)) {\n        assert.Equal(t, http.StatusCreated, rec.Code)\n        assert.Equal(t, userJSON, rec.Body.String())\n    }\n}\n\nfunc TestGetUser(t *testing.T) {\n    // Setup\n    e := echo.New()\n    req := httptest.NewRequest(http.MethodGet, "/", nil)\n    rec := httptest.NewRecorder()\n    c := e.NewContext(req, rec)\n    c.SetPath("/users/:email")\n    c.SetParamNames("email")\n    c.SetParamValues("jon@labstack.com")\n    h := &handler{mockDB}\n\n    // Assertions\n    if assert.NoError(t, h.getUser(c)) {\n        assert.Equal(t, http.StatusOK, rec.Code)\n        assert.Equal(t, userJSON, rec.Body.String())\n    }\n}\n')),(0,a.kt)("h3",{id:"using-form-payload"},"Using Form Payload"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// import "net/url"\nf := make(url.Values)\nf.Set("name", "Jon Snow")\nf.Set("email", "jon@labstack.com")\nreq := httptest.NewRequest(http.MethodPost, "/", strings.NewReader(f.Encode()))\nreq.Header.Set(echo.HeaderContentType, echo.MIMEApplicationForm)\n')),(0,a.kt)("h3",{id:"setting-path-params"},"Setting Path Params"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'c.SetParamNames("id", "email")\nc.SetParamValues("1", "jon@labstack.com")\n')),(0,a.kt)("h3",{id:"setting-query-params"},"Setting Query Params"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// import "net/url"\nq := make(url.Values)\nq.Set("email", "jon@labstack.com")\nreq := httptest.NewRequest(http.MethodGet, "/?"+q.Encode(), nil)\n')),(0,a.kt)("h2",{id:"testing-middleware"},"Testing Middleware"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"TBD")),(0,a.kt)("p",null,"For now you can look into built-in middleware ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/labstack/echo/tree/master/middleware"},"test cases"),"."))}d.isMDXComponent=!0}}]);