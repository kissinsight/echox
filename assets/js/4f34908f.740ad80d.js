"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2644],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>g});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(r),m=a,g=u["".concat(s,".").concat(m)]||u[m]||c[m]||i;return r?n.createElement(g,l(l({ref:t},d),{},{components:r})):n.createElement(g,l({ref:t},d))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3275:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const i={description:"Rewrite middleware"},l="Rewrite",o={unversionedId:"middleware/rewrite",id:"middleware/rewrite",title:"Rewrite",description:"Rewrite middleware",source:"@site/docs/middleware/rewrite.md",sourceDirName:"middleware",slug:"/middleware/rewrite",permalink:"/docs/middleware/rewrite",draft:!1,editUrl:"https://github.com/labstack/echox/blob/master/website/docs/middleware/rewrite.md",tags:[],version:"current",frontMatter:{description:"Rewrite middleware"},sidebar:"docsSidebar",previous:{title:"Request ID",permalink:"/docs/middleware/request-id"},next:{title:"Secure",permalink:"/docs/middleware/secure"}},s={},p=[{value:"Usage",id:"usage",level:2},{value:"Custom Configuration",id:"custom-configuration",level:2},{value:"Usage",id:"usage-1",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Regex-based Rules",id:"regex-based-rules",level:3}],d={toc:p},u="wrapper";function c(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"rewrite"},"Rewrite"),(0,a.kt)("p",null,"Rewrite middleware allows to rewrite an URL path based on provided rules. It can be helpful for backward compatibility or just creating cleaner and more descriptive links."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'e.Pre(middleware.Rewrite(map[string]string{\n  "/old":              "/new",\n  "/api/*":            "/$1",\n  "/js/*":             "/public/javascripts/$1",\n  "/users/*/orders/*": "/user/$1/order/$2",\n}))\n')),(0,a.kt)("p",null,"The values captured in asterisk can be retrieved by index e.g. $1, $2 and so on.\nEach asterisk will be non-greedy (translated to a capture group ",(0,a.kt)("inlineCode",{parentName:"p"},"(.*?)"),") and if using\nmultiple asterisk a trailing ",(0,a.kt)("inlineCode",{parentName:"p"},"*"),' will match the "rest" of the path.'),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Rewrite middleware should be registered via ",(0,a.kt)("inlineCode",{parentName:"p"},"Echo#Pre()")," to get triggered before the router.")),(0,a.kt)("h2",{id:"custom-configuration"},"Custom Configuration"),(0,a.kt)("h3",{id:"usage-1"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"e := echo.New()\ne.Pre(middleware.RewriteWithConfig(middleware.RewriteConfig{}))\n")),(0,a.kt)("h3",{id:"configuration"},"Configuration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// RewriteConfig defines the config for Rewrite middleware.\n  RewriteConfig struct {\n    // Skipper defines a function to skip middleware.\n    Skipper Skipper\n\n    // Rules defines the URL path rewrite rules. The values captured in asterisk can be\n    // retrieved by index e.g. $1, $2 and so on.\n    Rules map[string]string `yaml:"rules"`\n\n    // RegexRules defines the URL path rewrite rules using regexp.Rexexp with captures\n    // Every capture group in the values can be retrieved by index e.g. $1, $2 and so on.\n    RegexRules map[*regexp.Regexp]string\n  }\n')),(0,a.kt)("p",null,"Default Configuration:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Value"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Skipper"),(0,a.kt)("td",{parentName:"tr",align:null},"DefaultSkipper")))),(0,a.kt)("h3",{id:"regex-based-rules"},"Regex-based Rules"),(0,a.kt)("p",null,"For advanced rewriting of paths rules may also be defined using regular expression.\nNormal capture groups can be defined using ",(0,a.kt)("inlineCode",{parentName:"p"},"()")," and referenced by index (",(0,a.kt)("inlineCode",{parentName:"p"},"$1"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"$2"),", ...) for the rewritten path."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"RegexRules")," and normal ",(0,a.kt)("inlineCode",{parentName:"p"},"Rules")," can be combined."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'  e.Pre(RewriteWithConfig(RewriteConfig{\n    Rules: map[string]string{\n      "^/v1/*": "/v2/$1",\n    },\n    RegexRules: map[*regexp.Regexp]string{\n      regexp.MustCompile("^/foo/([0-9].*)"):  "/num/$1",\n      regexp.MustCompile("^/bar/(.+?)/(.*)"): "/baz/$2/$1",\n    },\n  }))\n')))}c.isMDXComponent=!0}}]);