"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9999],{3905:(e,t,r)=>{r.d(t,{Zo:()=>g,kt:()=>d});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),s=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},g=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,g=i(e,["components","mdxType","originalType","parentName"]),m=s(r),p=o,d=m["".concat(u,".").concat(p)]||m[p]||c[p]||a;return r?n.createElement(d,l(l({ref:t},g),{},{components:r})):n.createElement(d,l({ref:t},g))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=p;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[m]="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},4885:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var n=r(7462),o=(r(7294),r(3905));const a={description:"Logger middleware"},l="Logger",i={unversionedId:"middleware/logger",id:"middleware/logger",title:"Logger",description:"Logger middleware",source:"@site/docs/middleware/logger.md",sourceDirName:"middleware",slug:"/middleware/logger",permalink:"/docs/middleware/logger",draft:!1,editUrl:"https://github.com/labstack/echox/blob/master/website/docs/middleware/logger.md",tags:[],version:"current",frontMatter:{description:"Logger middleware"},sidebar:"docsSidebar",previous:{title:"Key Auth",permalink:"/docs/middleware/key-auth"},next:{title:"Method Override",permalink:"/docs/middleware/method-override"}},u={},s=[{value:"String Template",id:"string-template",level:2},{value:"Usage",id:"usage",level:2},{value:"Custom Configuration",id:"custom-configuration",level:2},{value:"Usage",id:"usage-1",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Default Configuration",id:"default-configuration",level:3},{value:"Customizable Function",id:"customizable-function",level:2},{value:"Examples",id:"examples",level:3}],g={toc:s},m="wrapper";function c(e){let{components:t,...r}=e;return(0,o.kt)(m,(0,n.Z)({},g,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"logger"},"Logger"),(0,o.kt)("p",null,"Logger middleware logs the information about each HTTP request. "),(0,o.kt)("p",null,"Echo has 2 different logger middlewares:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Older string template based logger ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/labstack/echo/blob/master/middleware/logger.go"},(0,o.kt)("inlineCode",{parentName:"a"},"Logger"))," - easy to start with but has limited capabilities"),(0,o.kt)("li",{parentName:"ul"},"Newer customizable function based logger ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/labstack/echo/blob/master/middleware/request_logger.go"},(0,o.kt)("inlineCode",{parentName:"a"},"RequestLogger"))," - allows developer fully to customize what is logged and how it is logged. Suitable for usage with 3rd party logger libraries.")),(0,o.kt)("h2",{id:"string-template"},"String Template"),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"e.Use(middleware.Logger())\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Sample output")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'{"time":"2017-01-12T08:58:07.372015644-08:00","remote_ip":"::1","host":"localhost:1323","method":"GET","uri":"/","status":200,"error":"","latency":14743,"latency_human":"14.743\xb5s","bytes_in":0,"bytes_out":2}\n')),(0,o.kt)("h2",{id:"custom-configuration"},"Custom Configuration"),(0,o.kt)("h3",{id:"usage-1"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'e.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{\n  Format: "method=${method}, uri=${uri}, status=${status}\\n",\n}))\n')),(0,o.kt)("p",null,"Example above uses a ",(0,o.kt)("inlineCode",{parentName:"p"},"Format")," which logs request method and request URI."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Sample output")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"method=GET, uri=/, status=200\n")),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'// LoggerConfig defines the config for Logger middleware.\nLoggerConfig struct {\n  // Skipper defines a function to skip middleware.\n  Skipper Skipper\n\n  // Tags to construct the logger format.\n  //\n  // - time_unix\n  // - time_unix_milli\n  // - time_unix_micro\n  // - time_unix_nano\n  // - time_rfc3339\n  // - time_rfc3339_nano\n  // - time_custom\n  // - id (Request ID)\n  // - remote_ip\n  // - uri\n  // - host\n  // - method\n  // - path\n  // - protocol\n  // - referer\n  // - user_agent\n  // - status\n  // - error\n  // - latency (In nanoseconds)\n  // - latency_human (Human readable)\n  // - bytes_in (Bytes received)\n  // - bytes_out (Bytes sent)\n  // - header:<NAME>\n  // - query:<NAME>\n  // - form:<NAME>\n  //\n  // Example "${remote_ip} ${status}"\n  //\n  // Optional. Default value DefaultLoggerConfig.Format.\n  Format string `yaml:"format"`\n\n  // Optional. Default value DefaultLoggerConfig.CustomTimeFormat.\n  CustomTimeFormat string `yaml:"custom_time_format"`\n\n  // Output is a writer where logs in JSON format are written.\n  // Optional. Default value os.Stdout.\n  Output io.Writer\n}\n')),(0,o.kt)("h3",{id:"default-configuration"},"Default Configuration"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'DefaultLoggerConfig = LoggerConfig{\n  Skipper: DefaultSkipper,\n  Format: `{"time":"${time_rfc3339_nano}","id":"${id}","remote_ip":"${remote_ip}",` +\n    `"host":"${host}","method":"${method}","uri":"${uri}","user_agent":"${user_agent}",` +\n    `"status":${status},"error":"${error}","latency":${latency},"latency_human":"${latency_human}"` +\n    `,"bytes_in":${bytes_in},"bytes_out":${bytes_out}}` + "\\n",\n  CustomTimeFormat: "2006-01-02 15:04:05.00000",\n}\n')),(0,o.kt)("h2",{id:"customizable-function"},"Customizable Function"),(0,o.kt)("p",null,"RequestLogger middleware allows developer fully to customize what is logged and how it is logged and is more suitable\nfor usage with 3rd party (structured logging) libraries."),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/labstack/echo/blob/master/middleware/request_logger.go"},(0,o.kt)("inlineCode",{parentName:"a"},"RequestLoggerConfig"))," structure fields for values that logger knows to extract."),(0,o.kt)("h3",{id:"examples"},"Examples"),(0,o.kt)("p",null,"Example for naive ",(0,o.kt)("inlineCode",{parentName:"p"},"fmt.Printf")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'e.Use(middleware.RequestLoggerWithConfig(middleware.RequestLoggerConfig{\n    LogStatus: true,\n    LogURI:    true,\n    BeforeNextFunc: func(c echo.Context) {\n        c.Set("customValueFromContext", 42)\n    },\n    LogValuesFunc: func(c echo.Context, v middleware.RequestLoggerValues) error {\n        value, _ := c.Get("customValueFromContext").(int)\n        fmt.Printf("REQUEST: uri: %v, status: %v, custom-value: %v\\n", v.URI, v.Status, value)\n        return nil\n    },\n}))\n')),(0,o.kt)("p",null,"Example for Zerolog (",(0,o.kt)("a",{parentName:"p",href:"https://github.com/rs/zerolog"},"https://github.com/rs/zerolog"),")"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'logger := zerolog.New(os.Stdout)\ne.Use(middleware.RequestLoggerWithConfig(middleware.RequestLoggerConfig{\n    LogURI:    true,\n    LogStatus: true,\n    LogValuesFunc: func(c echo.Context, v middleware.RequestLoggerValues) error {\n        logger.Info().\n            Str("URI", v.URI).\n            Int("status", v.Status).\n            Msg("request")\n\n        return nil\n    },\n}))\n')),(0,o.kt)("p",null,"Example for Zap (",(0,o.kt)("a",{parentName:"p",href:"https://github.com/uber-go/zap"},"https://github.com/uber-go/zap"),")"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'logger, _ := zap.NewProduction()\ne.Use(middleware.RequestLoggerWithConfig(middleware.RequestLoggerConfig{\n    LogURI:    true,\n    LogStatus: true,\n    LogValuesFunc: func(c echo.Context, v middleware.RequestLoggerValues) error {\n        logger.Info("request",\n            zap.String("URI", v.URI),\n            zap.Int("status", v.Status),\n        )\n\n        return nil\n    },\n}))\n')),(0,o.kt)("p",null,"Example for Logrus (",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sirupsen/logrus"},"https://github.com/sirupsen/logrus"),")"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'log := logrus.New()\ne.Use(middleware.RequestLoggerWithConfig(middleware.RequestLoggerConfig{\n    LogURI:    true,\n    LogStatus: true,\n    LogValuesFunc: func(c echo.Context, values middleware.RequestLoggerValues) error {\n        log.WithFields(logrus.Fields{\n            "URI":   values.URI,\n            "status": values.Status,\n        }).Info("request")\n\n        return nil\n    },\n}))\n')))}c.isMDXComponent=!0}}]);