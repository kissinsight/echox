"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[286],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},h="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=s(n),u=o,d=h["".concat(p,".").concat(u)]||h[u]||g[u]||r;return n?a.createElement(d,i(i({ref:t},c),{},{components:n})):a.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[h]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3660:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>g,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(7462),o=(n(7294),n(3905));const r={description:"Google App Engine recipe"},i="Google App Engine",l={unversionedId:"cookbook/google-app-engine",id:"cookbook/google-app-engine",title:"Google App Engine",description:"Google App Engine recipe",source:"@site/docs/cookbook/google-app-engine.md",sourceDirName:"cookbook",slug:"/cookbook/google-app-engine",permalink:"/docs/cookbook/google-app-engine",draft:!1,editUrl:"https://github.com/labstack/echox/blob/master/website/docs/cookbook/google-app-engine.md",tags:[],version:"current",frontMatter:{description:"Google App Engine recipe"},sidebar:"docsSidebar",previous:{title:"File Upload",permalink:"/docs/cookbook/file-upload"},next:{title:"Graceful Shutdown",permalink:"/docs/cookbook/graceful-shutdown"}},p={},s=[{value:"Standalone",id:"standalone",level:2},{value:"AppEngine Classic and Managed VM(s)",id:"appengine-classic-and-managed-vms",level:2},{value:"Configuration file",id:"configuration-file",level:3},{value:"Router configuration",id:"router-configuration",level:3}],c={toc:s},h="wrapper";function g(e){let{components:t,...n}=e;return(0,o.kt)(h,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"google-app-engine"},"Google App Engine"),(0,o.kt)("p",null,"Google App Engine (GAE) provides a range of hosting options from pure PaaS (App Engine Classic)\nthrough Managed VMs to fully self-managed or container-driven Compute Engine instances. Echo\nworks great with all of these but requires a few changes to the usual examples to run on the\nAppEngine Classic and Managed VM options. With a small amount of effort though it's possible\nto produce a codebase that will run on these and also non-managed platforms automatically."),(0,o.kt)("p",null,"We'll walk through the changes needed to support each option."),(0,o.kt)("h2",{id:"standalone"},"Standalone"),(0,o.kt)("p",null,"Wait? What? I thought this was about AppEngine! Bear with me - the easiest way to show the changes\nrequired is to start with a setup for standalone and work from there plus there's no reason we\nwouldn't want to retain the ability to run our app anywhere, right?"),(0,o.kt)("p",null,"We take advantage of the go ",(0,o.kt)("a",{parentName:"p",href:"http://golang.org/pkg/go/build/"},"build constraints or tags")," to change\nhow we create and run the Echo server for each platform while keeping the rest of the application\n(e.g. handler wireup) the same across all of them."),(0,o.kt)("p",null,"First, we have the normal setup based on the examples but we split it into two files - ",(0,o.kt)("inlineCode",{parentName:"p"},"app.go")," will\nbe common to all variations and holds the Echo instance variable. We initialise it from a function\nand because it is a ",(0,o.kt)("inlineCode",{parentName:"p"},"var")," this will happen ",(0,o.kt)("em",{parentName:"p"},"before")," any ",(0,o.kt)("inlineCode",{parentName:"p"},"init()")," functions run - a feature that we'll\nuse to connect our handlers later."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/labstack/echox/blob/master/cookbook/google-app-engine/app.go\n")),(0,o.kt)("p",null,"A separate source file contains the function to create the Echo instance and add the static\nfile handlers and middleware. Note the build tag on the first line which says to use this when ",(0,o.kt)("em",{parentName:"p"},"not"),"\nbulding with appengine or appenginevm tags (which thoese platforms automatically add for us). We also\nhave the ",(0,o.kt)("inlineCode",{parentName:"p"},"main()")," function to start serving our app as normal. This should all be very familiar."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/labstack/echox/blob/master/cookbook/google-app-engine/app-standalone.go\n")),(0,o.kt)("p",null,"The handler-wireup that would normally also be a part of this Echo setup moves to separate files which\ntake advantage of the ability to have multiple ",(0,o.kt)("inlineCode",{parentName:"p"},"init()")," functions which run ",(0,o.kt)("em",{parentName:"p"},"after")," the ",(0,o.kt)("inlineCode",{parentName:"p"},"e")," Echo var is\ninitialized but ",(0,o.kt)("em",{parentName:"p"},"before")," the ",(0,o.kt)("inlineCode",{parentName:"p"},"main()")," function is executed. These allow additional handlers to attach\nthemselves to the instance - I've found the ",(0,o.kt)("inlineCode",{parentName:"p"},"Group")," feature naturally fits into this pattern with a file\nper REST endpoint, often with a higher-level ",(0,o.kt)("inlineCode",{parentName:"p"},"api")," group created that they attach to instead of the root\nEcho instance directly (so things like CORS middleware can be added at this higher common-level)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/labstack/echox/blob/master/cookbook/google-app-engine/users.go\n")),(0,o.kt)("p",null,"If we run our app it should execute as it did before when everything was in one file although we have\nat least gained the ability to organize our handlers a little more cleanly."),(0,o.kt)("h2",{id:"appengine-classic-and-managed-vms"},"AppEngine Classic and Managed VM(s)"),(0,o.kt)("p",null,"So far we've seen how to split apart the Echo creation and setup but still have the same app that\nstill only runs standalone. Now we'll see how those changes allow us to add support for AppEngine\nhosting."),(0,o.kt)("p",null,"Refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://cloud.google.com/appengine/docs/go/"},"AppEngine site")," for full configuration\nand deployment information."),(0,o.kt)("h3",{id:"configuration-file"},"Configuration file"),(0,o.kt)("p",null,"Both of these are Platform as as Service options running on either sandboxed micro-containers\nor managed Compute Engine instances. Both require an ",(0,o.kt)("inlineCode",{parentName:"p"},"app.yaml")," file to describe the app to\nthe service. While the app ",(0,o.kt)("em",{parentName:"p"},"could")," still serve all it's static files itself, one of the benefits\nof the platform is having Google's infrastructure handle that for us so it can be offloaded and\nthe app only has to deal with dynamic requests. The platform also handles logging and http gzip\ncompression so these can be removed from the codebase as well."),(0,o.kt)("p",null,"The yaml file also contains other options to control instance size and auto-scaling so for true\ndeployment freedom you would likely have separate ",(0,o.kt)("inlineCode",{parentName:"p"},"app-classic.yaml")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"app-vm.yaml")," files and\nthis can help when making the transition from AppEngine Classic to Managed VMs."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"reference",reference:!0},"https://github.com/labstack/echox/blob/master/cookbook/google-app-engine/app-engine.yaml\n")),(0,o.kt)("h3",{id:"router-configuration"},"Router configuration"),(0,o.kt)("p",null,"We'll now use the ",(0,o.kt)("a",{parentName:"p",href:"http://golang.org/pkg/go/build/"},"build constraints")," again like we did when creating\nour ",(0,o.kt)("inlineCode",{parentName:"p"},"app-standalone.go")," instance but this time with the opposite tags to use this file ",(0,o.kt)("em",{parentName:"p"},"if")," the build has\nthe appengine or appenginevm tags (added automatically when deploying to these platforms)."),(0,o.kt)("p",null,"This allows us to replace the ",(0,o.kt)("inlineCode",{parentName:"p"},"createMux()")," function to create our Echo server ",(0,o.kt)("em",{parentName:"p"},"without")," any of the\nstatic file handling and logging + gzip middleware which is no longer required. Also worth nothing is\nthat GAE classic provides a wrapper to handle serving the app so instead of a ",(0,o.kt)("inlineCode",{parentName:"p"},"main()")," function where\nwe run the server, we instead wire up the router to the default ",(0,o.kt)("inlineCode",{parentName:"p"},"http.Handler")," instead."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/labstack/echox/blob/master/cookbook/google-app-engine/app-engine.go\n")),(0,o.kt)("p",null,"Managed VMs are slightly different. They are expected to respond to requests on port 8080 as well\nas special health-check requests used by the service to detect if an instance is still running in\norder to provide automated failover and instance replacement. The ",(0,o.kt)("inlineCode",{parentName:"p"},"google.golang.org/appengine"),"\npackage provides this for us so we have a slightly different version for Managed VMs:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/labstack/echox/blob/master/cookbook/google-app-engine/app-managed.go\n")),(0,o.kt)("p",null,"So now we have three different configurations. We can build and run our app as normal so it can\nbe executed locally, on a full Compute Engine instance or any other traditional hosting provider\n(including EC2, Docker etc...). This build will ignore the code in appengine and appenginevm tagged\nfiles and the ",(0,o.kt)("inlineCode",{parentName:"p"},"app.yaml")," file is meaningless to anything other than the AppEngine platform."),(0,o.kt)("p",null,"We can also run locally using the ",(0,o.kt)("a",{parentName:"p",href:"https://cloud.google.com/appengine/downloads"},"Google AppEngine SDK for Go"),"\neither emulating ",(0,o.kt)("a",{parentName:"p",href:"https://cloud.google.com/appengine/docs/go/tools/devserver"},"AppEngine Classic"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"goapp serve\n")),(0,o.kt)("p",null,"Or ",(0,o.kt)("a",{parentName:"p",href:"https://cloud.google.com/appengine/docs/managed-vms/sdk#run-local"},"Managed VM(s)"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"gcloud config set project [your project id]\ngcloud preview app run .\n")),(0,o.kt)("p",null,"And of course we can deploy our app to both of these platforms for easy and inexpensive auto-scaling joy."),(0,o.kt)("p",null,"Depending on what your app actually does it's possible you may need to make other changes to allow\nswitching between AppEngine provided service such as Datastore and alternative storage implementations\nsuch as MongoDB. A combination of go interfaces and build constraints can make this fairly straightforward\nbut is outside the scope of this example."))}g.isMDXComponent=!0}}]);