"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6948],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>d});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},m=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},l="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),l=u(r),h=o,d=l["".concat(c,".").concat(h)]||l[h]||p[h]||s;return r?n.createElement(d,a(a({ref:t},m),{},{components:r})):n.createElement(d,a({ref:t},m))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,a=new Array(s);a[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[l]="string"==typeof e?e:o,a[1]=i;for(var u=2;u<s;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},4688:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var n=r(7462),o=(r(7294),r(3905));const s={description:"Prometheus metrics middleware"},a="Prometheus",i={unversionedId:"middleware/prometheus",id:"middleware/prometheus",title:"Prometheus",description:"Prometheus metrics middleware",source:"@site/docs/middleware/prometheus.md",sourceDirName:"middleware",slug:"/middleware/prometheus",permalink:"/docs/middleware/prometheus",draft:!1,editUrl:"https://github.com/labstack/echox/blob/master/website/docs/middleware/prometheus.md",tags:[],version:"current",frontMatter:{description:"Prometheus metrics middleware"},sidebar:"docsSidebar",previous:{title:"Method Override",permalink:"/docs/middleware/method-override"},next:{title:"Proxy",permalink:"/docs/middleware/proxy"}},c={},u=[{value:"Usage",id:"usage",level:2},{value:"Examples",id:"examples",level:2},{value:"Custom Configuration",id:"custom-configuration",level:2},{value:"Serving custom Prometheus Metrics",id:"serving-custom-prometheus-metrics",level:3},{value:"Skipping URL(s)",id:"skipping-urls",level:3},{value:"Complex Scenarios",id:"complex-scenarios",level:2}],m={toc:u},l="wrapper";function p(e){let{components:t,...r}=e;return(0,o.kt)(l,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"prometheus"},"Prometheus"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Echo community contribution")),(0,o.kt)("p",null,"Prometheus middleware generates metrics for HTTP requests. "),(0,o.kt)("p",null,"There are 2 versions of Prometheus middleware:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"latest (recommended) ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/labstack/echo-contrib/blob/master/echoprometheus.go"},"https://github.com/labstack/echo-contrib/blob/master/echoprometheus.go")),(0,o.kt)("li",{parentName:"ul"},"old (deprecated) ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/labstack/echo-contrib/blob/master/prometheus/prometheus.go"},"https://github.com/labstack/echo-contrib/blob/master/prometheus/prometheus.go"),")")),(0,o.kt)("p",null,"Migration guide from old to newer middleware can found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/labstack/echo-contrib/blob/master/echoprometheus/README.md"},"here"),"."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Add needed module ",(0,o.kt)("inlineCode",{parentName:"li"},"go get -u github.com/labstack/echo-contrib")),(0,o.kt)("li",{parentName:"ul"},"Add Prometheus middleware and metrics serving route",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-go"},'e := echo.New()\ne.Use(echoprometheus.NewMiddleware("myapp")) // adds middleware to gather metrics\ne.GET("/metrics", echoprometheus.NewHandler()) // adds route to serve gathered metrics\n')))),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("p",null,"Serve metric from the same server as where metrics is gathered"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "errors"\n    "github.com/labstack/echo-contrib/echoprometheus"\n    "github.com/labstack/echo/v4"\n    "log"\n    "net/http"\n)\n\nfunc main() {\n    e := echo.New()\n    e.Use(echoprometheus.NewMiddleware("myapp")) // adds middleware to gather metrics\n    e.GET("/metrics", echoprometheus.NewHandler()) // adds route to serve gathered metrics\n    \n    e.GET("/hello", func(c echo.Context) error {\n        return c.String(http.StatusOK, "hello")\n    })\n\n    if err := e.Start(":8080"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n        log.Fatal(err)\n    }\n}\n')),(0,o.kt)("p",null,"Serve metrics on a separate port"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'func main() {\n    app := echo.New() // this Echo instance will serve route on port 8080\n    app.Use(echoprometheus.NewMiddleware("myapp")) // adds middleware to gather metrics\n\n    go func() {\n        metrics := echo.New() // this Echo will run on separate port 8081\n        metrics.GET("/metrics", echoprometheus.NewHandler()) // adds route to serve gathered metrics\n        if err := metrics.Start(":8081"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n            log.Fatal(err)\n        }\n    }()\n\n    app.GET("/hello", func(c echo.Context) error {\n        return c.String(http.StatusOK, "hello")\n    })\n\n    if err := app.Start(":8080"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n        log.Fatal(err)\n    }\n}\n')),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Sample output (for first example)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl http://localhost:8080/metrics\n\n# HELP echo_request_duration_seconds The HTTP request latencies in seconds.\n# TYPE echo_request_duration_seconds summary\necho_request_duration_seconds_sum 0.41086482\necho_request_duration_seconds_count 1\n# HELP echo_request_size_bytes The HTTP request sizes in bytes.\n# TYPE echo_request_size_bytes summary\necho_request_size_bytes_sum 56\necho_request_size_bytes_count 1\n# HELP echo_requests_total How many HTTP requests processed, partitioned by status code and HTTP method.\n# TYPE echo_requests_total counter\necho_requests_total{code="200",host="localhost:8080",method="GET",url="/"} 1\n# HELP echo_response_size_bytes The HTTP response sizes in bytes.\n# TYPE echo_response_size_bytes summary\necho_response_size_bytes_sum 61\necho_response_size_bytes_count 1\n...\n')),(0,o.kt)("h2",{id:"custom-configuration"},"Custom Configuration"),(0,o.kt)("h3",{id:"serving-custom-prometheus-metrics"},"Serving custom Prometheus Metrics"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Usage")),(0,o.kt)("p",null,"Using custom metrics with Prometheus default registry:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "errors"\n    "github.com/labstack/echo-contrib/echoprometheus"\n    "github.com/labstack/echo/v4"\n    "github.com/prometheus/client_golang/prometheus"\n    "log"\n    "net/http"\n)\n\nfunc main() {\n    e := echo.New()\n\n    customCounter := prometheus.NewCounter( // create new counter metric. This is replacement for `prometheus.Metric` struct\n        prometheus.CounterOpts{\n            Name: "custom_requests_total",\n            Help: "How many HTTP requests processed, partitioned by status code and HTTP method.",\n        },\n    )\n    if err := prometheus.Register(customCounter); err != nil { // register your new counter metric with default metrics registry\n        log.Fatal(err)\n    }\n\n    e.Use(echoprometheus.NewMiddlewareWithConfig(echoprometheus.MiddlewareConfig{\n        AfterNext: func(c echo.Context, err error) {\n            customCounter.Inc() // use our custom metric in middleware. after every request increment the counter\n        },\n    }))\n    e.GET("/metrics", echoprometheus.NewHandler()) // register route for getting gathered metrics\n\n    if err := e.Start(":8080"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n        log.Fatal(err)\n    }\n}\n')),(0,o.kt)("p",null,"or create your own registry and register custom metrics with that:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "errors"\n    "github.com/labstack/echo-contrib/echoprometheus"\n    "github.com/labstack/echo/v4"\n    "github.com/prometheus/client_golang/prometheus"\n    "log"\n    "net/http"\n)\n\nfunc main() {\n    e := echo.New()\n\n    customRegistry := prometheus.NewRegistry() // create custom registry for your custom metrics\n    customCounter := prometheus.NewCounter(    // create new counter metric. This is replacement for `prometheus.Metric` struct\n        prometheus.CounterOpts{\n            Name: "custom_requests_total",\n            Help: "How many HTTP requests processed, partitioned by status code and HTTP method.",\n        },\n    )\n    if err := customRegistry.Register(customCounter); err != nil { // register your new counter metric with metrics registry\n        log.Fatal(err)\n    }\n\n    e.Use(echoprometheus.NewMiddlewareWithConfig(echoprometheus.MiddlewareConfig{\n        AfterNext: func(c echo.Context, err error) {\n            customCounter.Inc() // use our custom metric in middleware. after every request increment the counter\n        },\n        Registerer: customRegistry, // use our custom registry instead of default Prometheus registry\n    }))\n    e.GET("/metrics", echoprometheus.NewHandlerWithConfig(echoprometheus.HandlerConfig{Gatherer: customRegistry})) // register route for getting gathered metrics data from our custom Registry\n\n    if err := e.Start(":8080"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n        log.Fatal(err)\n    }\n}\n')),(0,o.kt)("h3",{id:"skipping-urls"},"Skipping URL(s)"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Usage")),(0,o.kt)("p",null,"A middleware skipper can be passed to avoid generating metrics to certain URL(s)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "errors"\n    "github.com/labstack/echo-contrib/echoprometheus"\n    "github.com/labstack/echo/v4"\n    "log"\n    "net/http"\n    "strings"\n)\n\nfunc main() {\n    e := echo.New()\n\n    mwConfig := echoprometheus.MiddlewareConfig{\n        Skipper: func(c echo.Context) bool {\n            return strings.HasPrefix(c.Path(), "/testurl")\n        }, // does not gather metrics metrics on routes starting with `/testurl`\n    }\n    e.Use(echoprometheus.NewMiddlewareWithConfig(mwConfig)) // adds middleware to gather metrics\n\n    e.GET("/metrics", echoprometheus.NewHandler()) // adds route to serve gathered metrics\n\n    e.GET("/", func(c echo.Context) error {\n        return c.String(http.StatusOK, "Hello, World!")\n    })\n\n    if err := e.Start(":8080"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n        log.Fatal(err)\n    }\n}\n')),(0,o.kt)("h2",{id:"complex-scenarios"},"Complex Scenarios"),(0,o.kt)("p",null,"Example: modify default ",(0,o.kt)("inlineCode",{parentName:"p"},"echoprometheus")," metrics definitions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "errors"\n    "github.com/labstack/echo-contrib/echoprometheus"\n    "github.com/labstack/echo/v4"\n    "github.com/prometheus/client_golang/prometheus"\n    "log"\n    "net/http"\n)\n\nfunc main() {\n    e := echo.New()\n\n    e.Use(echoprometheus.NewMiddlewareWithConfig(echoprometheus.MiddlewareConfig{\n        // labels of default metrics can be modified or added with `LabelFuncs` function\n        LabelFuncs: map[string]echoprometheus.LabelValueFunc{\n            "scheme": func(c echo.Context, err error) string { // additional custom label\n                return c.Scheme()\n            },\n            "host": func(c echo.Context, err error) string { // overrides default \'host\' label value\n                return "y_" + c.Request().Host\n            },\n        },\n        // The `echoprometheus` middleware registers the following metrics by default:\n        // - Histogram: request_duration_seconds\n        // - Histogram: response_size_bytes\n        // - Histogram: request_size_bytes\n        // - Counter: requests_total\n        // which can be modified with `HistogramOptsFunc` and `CounterOptsFunc` functions\n        HistogramOptsFunc: func(opts prometheus.HistogramOpts) prometheus.HistogramOpts {\n            if opts.Name == "request_duration_seconds" {\n                opts.Buckets = []float64{1000.0, 10_000.0, 100_000.0, 1_000_000.0} // 1KB ,10KB, 100KB, 1MB\n            }\n            return opts\n        },\n        CounterOptsFunc: func(opts prometheus.CounterOpts) prometheus.CounterOpts {\n            if opts.Name == "requests_total" {\n                opts.ConstLabels = prometheus.Labels{"my_const": "123"}\n            }\n            return opts\n        },\n    })) // adds middleware to gather metrics\n\n    e.GET("/metrics", echoprometheus.NewHandler()) // adds route to serve gathered metrics\n\n    e.GET("/hello", func(c echo.Context) error {\n        return c.String(http.StatusOK, "hello")\n    })\n\n    if err := e.Start(":8080"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n        log.Fatal(err)\n    }\n}\n')))}p.isMDXComponent=!0}}]);