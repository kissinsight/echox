"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4157],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),m=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=m(n),u=r,g=c["".concat(p,".").concat(u)]||c[u]||d[u]||l;return n?a.createElement(g,o(o({ref:t},s),{},{components:n})):a.createElement(g,o({ref:t},s))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:r,o[1]=i;for(var m=2;m<l;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3302:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const l={description:"Using templates",slug:"/templates",sidebar_position:12},o="Templates",i={unversionedId:"guide/templates",id:"guide/templates",title:"Templates",description:"Using templates",source:"@site/docs/guide/templates.md",sourceDirName:"guide",slug:"/templates",permalink:"/docs/templates",draft:!1,editUrl:"https://github.com/labstack/echox/blob/master/website/docs/guide/templates.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{description:"Using templates",slug:"/templates",sidebar_position:12},sidebar:"docsSidebar",previous:{title:"Static Files",permalink:"/docs/static-files"},next:{title:"Testing",permalink:"/docs/testing"}},p={},m=[{value:"Rendering",id:"rendering",level:2},{value:"Advanced - Calling Echo from templates",id:"advanced---calling-echo-from-templates",level:2}],s={toc:m},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"templates"},"Templates"),(0,r.kt)("h2",{id:"rendering"},"Rendering"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Context#Render(code int, name string, data interface{}) error")," renders a template\nwith data and sends a text/html response with status code. Templates can be registered by setting ",(0,r.kt)("inlineCode",{parentName:"p"},"Echo.Renderer"),", allowing us to use any template engine."),(0,r.kt)("p",null,"Example below shows how to use Go ",(0,r.kt)("inlineCode",{parentName:"p"},"html/template"),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Implement ",(0,r.kt)("inlineCode",{parentName:"p"},"echo.Renderer")," interface"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type Template struct {\n    templates *template.Template\n}\n\nfunc (t *Template) Render(w io.Writer, name string, data interface{}, c echo.Context) error {\n    return t.templates.ExecuteTemplate(w, name, data)\n}\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Pre-compile templates"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"public/views/hello.html")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-html"},'{{define "hello"}}Hello, {{.}}!{{end}}\n')),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-go"},'t := &Template{\n    templates: template.Must(template.ParseGlob("public/views/*.html")),\n}\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Register templates"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-go"},'e := echo.New()\ne.Renderer = t\ne.GET("/hello", Hello)\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Render a template inside your handler"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func Hello(c echo.Context) error {\n    return c.Render(http.StatusOK, "hello", "World")\n}\n')))),(0,r.kt)("h2",{id:"advanced---calling-echo-from-templates"},"Advanced - Calling Echo from templates"),(0,r.kt)("p",null,"In certain situations it might be useful to generate URIs from the templates. In order to do so, you need to call ",(0,r.kt)("inlineCode",{parentName:"p"},"Echo#Reverse")," from the templates itself. Golang's ",(0,r.kt)("inlineCode",{parentName:"p"},"html/template")," package is not the best suited for this job, but this can be done in two ways: by providing a common method on all objects passed to templates or by passing ",(0,r.kt)("inlineCode",{parentName:"p"},"map[string]interface{}")," and augmenting this object in the custom renderer. Given the flexibility of the latter approach, here is a sample program:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"template.html")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<html>\n    <body>\n        <h1>Hello {{index . "name"}}</h1>\n\n        <p>{{ with $x := index . "reverse" }}\n           {{ call $x "foobar" }} &lt;-- this will call the $x with parameter "foobar"\n           {{ end }}\n        </p>\n    </body>\n</html>\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"server.go")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "html/template"\n    "io"\n    "net/http"\n\n    "github.com/labstack/echo/v4"\n)\n\n// TemplateRenderer is a custom html/template renderer for Echo framework\ntype TemplateRenderer struct {\n    templates *template.Template\n}\n\n// Render renders a template document\nfunc (t *TemplateRenderer) Render(w io.Writer, name string, data interface{}, c echo.Context) error {\n\n    // Add global methods if data is a map\n    if viewContext, isMap := data.(map[string]interface{}); isMap {\n        viewContext["reverse"] = c.Echo().Reverse\n    }\n\n    return t.templates.ExecuteTemplate(w, name, data)\n}\n\nfunc main() {\n  e := echo.New()\n  renderer := &TemplateRenderer{\n      templates: template.Must(template.ParseGlob("*.html")),\n  }\n  e.Renderer = renderer\n\n  // Named route "foobar"\n  e.GET("/something", func(c echo.Context) error {\n      return c.Render(http.StatusOK, "template.html", map[string]interface{}{\n          "name": "Dolly!",\n      })\n  }).Name = "foobar"\n\n  e.Logger.Fatal(e.Start(":8000"))\n}\n')))}d.isMDXComponent=!0}}]);