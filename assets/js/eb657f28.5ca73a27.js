"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3397],{3905:(e,r,t)=>{t.d(r,{Zo:()=>s,kt:()=>f});var n=t(7294);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=n.createContext({}),c=function(e){var r=n.useContext(d),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},s=function(e){var r=c(e.components);return n.createElement(d.Provider,{value:r},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,o=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(t),p=i,f=u["".concat(d,".").concat(p)]||u[p]||m[p]||o;return t?n.createElement(f,a(a({ref:r},s),{},{components:t})):n.createElement(f,a({ref:r},s))}));function f(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=p;var l={};for(var d in r)hasOwnProperty.call(r,d)&&(l[d]=r[d]);l.originalType=e,l[u]="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=t[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},3162:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=t(7462),i=(t(7294),t(3905));const o={description:"Rate limiter middleware"},a="Rate Limiter",l={unversionedId:"middleware/rate-limiter",id:"middleware/rate-limiter",title:"Rate Limiter",description:"Rate limiter middleware",source:"@site/docs/middleware/rate-limiter.md",sourceDirName:"middleware",slug:"/middleware/rate-limiter",permalink:"/docs/middleware/rate-limiter",draft:!1,editUrl:"https://github.com/labstack/echox/blob/master/website/docs/middleware/rate-limiter.md",tags:[],version:"current",frontMatter:{description:"Rate limiter middleware"},sidebar:"docsSidebar",previous:{title:"Proxy",permalink:"/docs/middleware/proxy"},next:{title:"Recover",permalink:"/docs/middleware/recover"}},d={},c=[{value:"Usage",id:"usage",level:2},{value:"Custom Configuration",id:"custom-configuration",level:2},{value:"Errors",id:"errors",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Default Configuration",id:"default-configuration",level:3}],s={toc:c},u="wrapper";function m(e){let{components:r,...t}=e;return(0,i.kt)(u,(0,n.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"rate-limiter"},"Rate Limiter"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"RateLimiter")," provides a Rate Limiter middleware for limiting the amount of requests to the server from a particular IP or id within a time period."),(0,i.kt)("p",null,"By default an in-memory store is used for keeping track of requests. The default in-memory implementation is focused on correctness and\nmay not be the best option for a high number of concurrent requests or a large number of different identifiers (>16k)."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"To add a rate limit to your application simply add the ",(0,i.kt)("inlineCode",{parentName:"p"},"RateLimiter")," middleware.\nThe example below will limit the application to 20 requests/sec using the default in-memory store:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"e.Use(middleware.RateLimiter(middleware.NewRateLimiterMemoryStore(20)))\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"If the provided rate is a float number, Burst will be treated as the rounded down value of the rate.")),(0,i.kt)("h2",{id:"custom-configuration"},"Custom Configuration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"config := middleware.RateLimiterConfig{\n    Skipper: middleware.DefaultSkipper,\n    Store: middleware.NewRateLimiterMemoryStoreWithConfig(\n        middleware.RateLimiterMemoryStoreConfig{Rate: 10, Burst: 30, ExpiresIn: 3 * time.Minute},\n    ),\n    IdentifierExtractor: func(ctx echo.Context) (string, error) {\n        id := ctx.RealIP()\n        return id, nil\n    },\n    ErrorHandler: func(context echo.Context, err error) error {\n        return context.JSON(http.StatusForbidden, nil)\n    },\n    DenyHandler: func(context echo.Context, identifier string,err error) error {\n        return context.JSON(http.StatusTooManyRequests, nil)\n    },\n}\n\ne.Use(middleware.RateLimiterWithConfig(config))\n")),(0,i.kt)("h3",{id:"errors"},"Errors"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    // ErrRateLimitExceeded denotes an error raised when rate limit is exceeded\n    ErrRateLimitExceeded = echo.NewHTTPError(http.StatusTooManyRequests, "rate limit exceeded")\n    // ErrExtractorError denotes an error raised when extractor function is unsuccessful\n    ErrExtractorError = echo.NewHTTPError(http.StatusForbidden, "error while extracting identifier")\n)\n')),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If you need to implement your own store, be sure to implement the RateLimiterStore interface and pass it to RateLimiterConfig and you're good to go!")),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"type RateLimiterConfig struct {\n    Skipper    Skipper\n    BeforeFunc BeforeFunc\n    // IdentifierExtractor uses echo.Context to extract the identifier for a visitor\n    IdentifierExtractor Extractor\n    // Store defines a store for the rate limiter\n    Store RateLimiterStore\n    // ErrorHandler provides a handler to be called when IdentifierExtractor returns a non-nil error\n    ErrorHandler func(context echo.Context, err error) error\n    // DenyHandler provides a handler to be called when RateLimiter denies access\n    DenyHandler func(context echo.Context, identifier string, err error) error\n}\n")),(0,i.kt)("h3",{id:"default-configuration"},"Default Configuration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"// DefaultRateLimiterConfig defines default values for RateLimiterConfig\nvar DefaultRateLimiterConfig = RateLimiterConfig{\n    Skipper: DefaultSkipper,\n    IdentifierExtractor: func(ctx echo.Context) (string, error) {\n        id := ctx.RealIP()\n        return id, nil\n    },\n    ErrorHandler: func(context echo.Context, err error) error {\n        return &echo.HTTPError{\n            Code:     ErrExtractorError.Code,\n            Message:  ErrExtractorError.Message,\n            Internal: err,\n        }\n    },\n    DenyHandler: func(context echo.Context, identifier string, err error) error {\n        return &echo.HTTPError{\n            Code:     ErrRateLimitExceeded.Code,\n            Message:  ErrRateLimitExceeded.Message,\n            Internal: err,\n        }\n    },\n}\n")))}m.isMDXComponent=!0}}]);