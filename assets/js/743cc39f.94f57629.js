"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[740],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>m});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=n.createContext({}),d=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},c=function(e){var r=d(e.components);return n.createElement(l.Provider,{value:r},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},v=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(t),v=a,m=p["".concat(l,".").concat(v)]||p[v]||u[v]||o;return t?n.createElement(m,i(i({ref:r},c),{},{components:t})):n.createElement(m,i({ref:r},c))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=v;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var d=2;d<o;d++)i[d]=t[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}v.displayName="MDXCreateElement"},2965:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var n=t(7462),a=(t(7294),t(3905));const o={description:"Starting server",slug:"/start-server",sidebar_position:7},i="Start Server",s={unversionedId:"guide/start-server",id:"guide/start-server",title:"Start Server",description:"Starting server",source:"@site/docs/guide/start-server.md",sourceDirName:"guide",slug:"/start-server",permalink:"/docs/start-server",draft:!1,editUrl:"https://github.com/labstack/echox/blob/master/website/docs/guide/start-server.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{description:"Starting server",slug:"/start-server",sidebar_position:7},sidebar:"docsSidebar",previous:{title:"Error Handling",permalink:"/docs/error-handling"},next:{title:"IP Address",permalink:"/docs/ip-address"}},l={},d=[{value:"HTTP Server",id:"http-server",level:2},{value:"HTTPS Server",id:"https-server",level:2},{value:"Auto TLS Server with Let\u2019s Encrypt",id:"auto-tls-server-with-lets-encrypt",level:2},{value:"HTTP/2 Cleartext Server (HTTP2 over HTTP)",id:"http2-cleartext-server-http2-over-http",level:2}],c={toc:d},p="wrapper";function u(e){let{components:r,...t}=e;return(0,a.kt)(p,(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"start-server"},"Start Server"),(0,a.kt)("p",null,"Echo provides following convenience methods to start the server:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Echo.Start(address string)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Echo.StartTLS(address string, certFile, keyFile interface{})")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Echo.StartAutoTLS(address string)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Echo.StartH2CServer(address string, h2s *http2.Server)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Echo.StartServer(s *http.Server)"))),(0,a.kt)("h2",{id:"http-server"},"HTTP Server"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Echo.Start")," is convenience method that starts http server with Echo serving requests."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'func main() {\n  e := echo.New()\n  // add middleware and routes\n  // ...\n  if err := e.Start(":8080"); err != http.ErrServerClosed {\n    log.Fatal(err)\n  }\n}\n')),(0,a.kt)("p",null,"Following is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"Echo.Start")," previous example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'func main() {\n  e := echo.New()\n  // add middleware and routes\n  // ...\n  s := http.Server{\n    Addr:        ":8080",\n    Handler:     e,\n    //ReadTimeout: 30 * time.Second, // customize http.Server timeouts\n  }\n  if err := s.ListenAndServe(); err != http.ErrServerClosed {\n    log.Fatal(err)\n  }\n}\n')),(0,a.kt)("h2",{id:"https-server"},"HTTPS Server"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Echo.StartTLS")," is convenience method that starts HTTPS server with Echo serving requests on given address and uses\n",(0,a.kt)("inlineCode",{parentName:"p"},"server.crt")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"server.key")," as TLS certificate pair."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'func main() {\n  e := echo.New()\n  // add middleware and routes\n  // ...\n  if err := e.StartTLS(":8443", "server.crt", "server.key"); err != http.ErrServerClosed {\n    log.Fatal(err)\n  }\n}\n')),(0,a.kt)("p",null,"Following is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"Echo.StartTLS")," previous example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'func main() {\n  e := echo.New()\n  // add middleware and routes\n  // ...\n  s := http.Server{\n    Addr:    ":8443",\n    Handler: e, // set Echo as handler\n    TLSConfig: &tls.Config{\n      //MinVersion: 1, // customize TLS configuration\n    },\n    //ReadTimeout: 30 * time.Second, // use custom timeouts\n  }\n  if err := s.ListenAndServeTLS("server.crt", "server.key"); err != http.ErrServerClosed {\n    log.Fatal(err)\n  }\n}\n')),(0,a.kt)("h2",{id:"auto-tls-server-with-lets-encrypt"},"Auto TLS Server with Let\u2019s Encrypt"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/docs/cookbook/auto-tls#server"},"Auto TLS Recipe")),(0,a.kt)("h2",{id:"http2-cleartext-server-http2-over-http"},"HTTP/2 Cleartext Server (HTTP2 over HTTP)"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Echo.StartH2CServer")," is convenience method that starts a custom HTTP/2 cleartext server on given address"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'func main() {\n  e := echo.New()\n  // add middleware and routes\n  // ...\n  s := &http2.Server{\n    MaxConcurrentStreams: 250,\n    MaxReadFrameSize:     1048576,\n    IdleTimeout:          10 * time.Second,\n  }\n  if err := e.StartH2CServer(":8080", s); err != http.ErrServerClosed {\n    log.Fatal(err)\n  }\n}\n')),(0,a.kt)("p",null,"Following is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"Echo.StartH2CServer")," previous example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'func main() {\n  e := echo.New()\n  // add middleware and routes\n  // ...\n  h2s := &http2.Server{\n    MaxConcurrentStreams: 250,\n    MaxReadFrameSize:     1048576,\n    IdleTimeout:          10 * time.Second,\n  }\n  s := http.Server{\n    Addr:    ":8080",\n    Handler: h2c.NewHandler(e, h2s),\n  }\n  if err := s.ListenAndServe(); err != http.ErrServerClosed {\n    log.Fatal(err)\n  }\n}\n')))}u.isMDXComponent=!0}}]);