"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5352],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),l=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(u.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(t),f=i,h=d["".concat(u,".").concat(f)]||d[f]||p[f]||o;return t?r.createElement(h,a(a({ref:n},c),{},{components:t})):r.createElement(h,a({ref:n},c))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=f;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s[d]="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},7965:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=t(7462),i=(t(7294),t(3905));const o={description:"JWT middleware"},a="JWT",s={unversionedId:"middleware/jwt",id:"middleware/jwt",title:"JWT",description:"JWT middleware",source:"@site/docs/middleware/jwt.md",sourceDirName:"middleware",slug:"/middleware/jwt",permalink:"/docs/middleware/jwt",draft:!1,editUrl:"https://github.com/labstack/echox/blob/master/website/docs/middleware/jwt.md",tags:[],version:"current",frontMatter:{description:"JWT middleware"},sidebar:"docsSidebar",previous:{title:"Jaeger",permalink:"/docs/middleware/jaeger"},next:{title:"Key Auth",permalink:"/docs/middleware/key-auth"}},u={},l=[{value:"Dependencies",id:"dependencies",level:2},{value:"Usage",id:"usage",level:2},{value:"Custom Configuration",id:"custom-configuration",level:2},{value:"Usage",id:"usage-1",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Example",id:"example",level:2}],c={toc:l},d="wrapper";function p(e){let{components:n,...t}=e;return(0,i.kt)(d,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"jwt"},"JWT"),(0,i.kt)("p",null,"JWT provides a JSON Web Token (JWT) authentication middleware. Echo JWT middleware is located at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/labstack/echo-jwt"},"https://github.com/labstack/echo-jwt")),(0,i.kt)("p",null,"Basic middleware behavior: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For valid token, it sets the user in context and calls next handler."),(0,i.kt)("li",{parentName:"ul"},'For invalid token, it sends "401 - Unauthorized" response.'),(0,i.kt)("li",{parentName:"ul"},"For missing or invalid ",(0,i.kt)("inlineCode",{parentName:"li"},"Authorization"),' header, it sends "400 - Bad Request".')),(0,i.kt)("h2",{id:"dependencies"},"Dependencies"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'import "github.com/labstack/echo-jwt/v4"\n')),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'e.Use(echojwt.JWT([]byte("secret")))\n')),(0,i.kt)("h2",{id:"custom-configuration"},"Custom Configuration"),(0,i.kt)("h3",{id:"usage-1"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'e.Use(echojwt.WithConfig(echojwt.Config{\n  // ...\n  SigningKey:             []byte("secret"),\n  // ...\n}))\n')),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'type Config struct {\n    // Skipper defines a function to skip middleware.\n    Skipper middleware.Skipper\n\n    // BeforeFunc defines a function which is executed just before the middleware.\n    BeforeFunc middleware.BeforeFunc\n\n    // SuccessHandler defines a function which is executed for a valid token.\n    SuccessHandler func(c echo.Context)\n\n    // ErrorHandler defines a function which is executed when all lookups have been done and none of them passed Validator\n    // function. ErrorHandler is executed with last missing (ErrExtractionValueMissing) or an invalid key.\n    // It may be used to define a custom JWT error.\n    //\n    // Note: when error handler swallows the error (returns nil) middleware continues handler chain execution towards handler.\n    // This is useful in cases when portion of your site/api is publicly accessible and has extra features for authorized users\n    // In that case you can use ErrorHandler to set default public JWT token value to request and continue with handler chain.\n    ErrorHandler func(c echo.Context, err error) error\n\n    // ContinueOnIgnoredError allows the next middleware/handler to be called when ErrorHandler decides to\n    // ignore the error (by returning `nil`).\n    // This is useful when parts of your site/api allow public access and some authorized routes provide extra functionality.\n    // In that case you can use ErrorHandler to set a default public JWT token value in the request context\n    // and continue. Some logic down the remaining execution chain needs to check that (public) token value then.\n    ContinueOnIgnoredError bool\n\n    // Context key to store user information from the token into context.\n    // Optional. Default value "user".\n    ContextKey string\n\n    // Signing key to validate token.\n    // This is one of the three options to provide a token validation key.\n    // The order of precedence is a user-defined KeyFunc, SigningKeys and SigningKey.\n    // Required if neither user-defined KeyFunc nor SigningKeys is provided.\n    SigningKey interface{}\n\n    // Map of signing keys to validate token with kid field usage.\n    // This is one of the three options to provide a token validation key.\n    // The order of precedence is a user-defined KeyFunc, SigningKeys and SigningKey.\n    // Required if neither user-defined KeyFunc nor SigningKey is provided.\n    SigningKeys map[string]interface{}\n\n    // Signing method used to check the token\'s signing algorithm.\n    // Optional. Default value HS256.\n    SigningMethod string\n\n    // KeyFunc defines a user-defined function that supplies the public key for a token validation.\n    // The function shall take care of verifying the signing algorithm and selecting the proper key.\n    // A user-defined KeyFunc can be useful if tokens are issued by an external party.\n    // Used by default ParseTokenFunc implementation.\n    //\n    // When a user-defined KeyFunc is provided, SigningKey, SigningKeys, and SigningMethod are ignored.\n    // This is one of the three options to provide a token validation key.\n    // The order of precedence is a user-defined KeyFunc, SigningKeys and SigningKey.\n    // Required if neither SigningKeys nor SigningKey is provided.\n    // Not used if custom ParseTokenFunc is set.\n    // Default to an internal implementation verifying the signing algorithm and selecting the proper key.\n    KeyFunc jwt.Keyfunc\n\n    // TokenLookup is a string in the form of "<source>:<name>" or "<source>:<name>,<source>:<name>" that is used\n    // to extract token from the request.\n    // Optional. Default value "header:Authorization".\n    // Possible values:\n    // - "header:<name>" or "header:<name>:<cut-prefix>"\n    //          `<cut-prefix>` is argument value to cut/trim prefix of the extracted value. This is useful if header\n    //          value has static prefix like `Authorization: <auth-scheme> <authorisation-parameters>` where part that we\n    //          want to cut is `<auth-scheme> ` note the space at the end.\n    //          In case of JWT tokens `Authorization: Bearer <token>` prefix we cut is `Bearer `.\n    // If prefix is left empty the whole value is returned.\n    // - "query:<name>"\n    // - "param:<name>"\n    // - "cookie:<name>"\n    // - "form:<name>"\n    // Multiple sources example:\n    // - "header:Authorization:Bearer ,cookie:myowncookie"\n    TokenLookup string\n\n    // TokenLookupFuncs defines a list of user-defined functions that extract JWT token from the given context.\n    // This is one of the two options to provide a token extractor.\n    // The order of precedence is user-defined TokenLookupFuncs, and TokenLookup.\n    // You can also provide both if you want.\n    TokenLookupFuncs []middleware.ValuesExtractor\n\n    // ParseTokenFunc defines a user-defined function that parses token from given auth. Returns an error when token\n    // parsing fails or parsed token is invalid.\n    // Defaults to implementation using `github.com/golang-jwt/jwt` as JWT implementation library\n    ParseTokenFunc func(c echo.Context, auth string) (interface{}, error)\n\n    // Claims are extendable claims data defining token content. Used by default ParseTokenFunc implementation.\n    // Not used if custom ParseTokenFunc is set.\n    // Optional. Defaults to function returning jwt.MapClaims\n    NewClaimsFunc func(c echo.Context) jwt.Claims\n}\n')),(0,i.kt)("h2",{id:"example"},(0,i.kt)("a",{parentName:"h2",href:"/docs/cookbook/jwt"},"Example")))}p.isMDXComponent=!0}}]);